/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.vs.color_t');
goog.provide('proto.vs.cov_collection_t');
goog.provide('proto.vs.cov_t');
goog.provide('proto.vs.obj_collection_t');
goog.provide('proto.vs.obj_collection_t.obj_type');
goog.provide('proto.vs.obj_t');
goog.provide('proto.vs.point3d_list_collection_t');
goog.provide('proto.vs.point3d_list_collection_t.point_type');
goog.provide('proto.vs.point3d_list_t');
goog.provide('proto.vs.point3d_t');
goog.provide('proto.vs.reset_collections_t');
goog.provide('proto.vs.text_collection_t');
goog.provide('proto.vs.text_t');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.obj_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vs.obj_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.obj_t.displayName = 'proto.vs.obj_t';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.obj_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.obj_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.obj_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.obj_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    yaw: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    pitch: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    roll: +jspb.Message.getFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.obj_t}
 */
proto.vs.obj_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.obj_t;
  return proto.vs.obj_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.obj_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.obj_t}
 */
proto.vs.obj_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitch(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.obj_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.obj_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.obj_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.obj_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vs.obj_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double x = 2;
 * @return {number}
 */
proto.vs.obj_t.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double y = 3;
 * @return {number}
 */
proto.vs.obj_t.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double z = 4;
 * @return {number}
 */
proto.vs.obj_t.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double yaw = 5;
 * @return {number}
 */
proto.vs.obj_t.prototype.getYaw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setYaw = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double pitch = 6;
 * @return {number}
 */
proto.vs.obj_t.prototype.getPitch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setPitch = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional double roll = 7;
 * @return {number}
 */
proto.vs.obj_t.prototype.getRoll = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.vs.obj_t.prototype.setRoll = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.obj_collection_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.obj_collection_t.repeatedFields_, null);
};
goog.inherits(proto.vs.obj_collection_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.obj_collection_t.displayName = 'proto.vs.obj_collection_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.obj_collection_t.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.obj_collection_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.obj_collection_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.obj_collection_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.obj_collection_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reset: jspb.Message.getFieldWithDefault(msg, 3, false),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    objsList: jspb.Message.toObjectList(msg.getObjsList(),
    proto.vs.obj_t.toObject, includeInstance),
    nobjs: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.obj_collection_t}
 */
proto.vs.obj_collection_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.obj_collection_t;
  return proto.vs.obj_collection_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.obj_collection_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.obj_collection_t}
 */
proto.vs.obj_collection_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 4:
      var value = /** @type {!proto.vs.obj_collection_t.obj_type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = new proto.vs.obj_t;
      reader.readMessage(value,proto.vs.obj_t.deserializeBinaryFromReader);
      msg.addObjs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNobjs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.obj_collection_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.obj_collection_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.obj_collection_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.obj_collection_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReset();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getObjsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.vs.obj_t.serializeBinaryToWriter
    );
  }
  f = message.getNobjs();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vs.obj_collection_t.obj_type = {
  POSE: 0,
  TREE: 1,
  SQUARE: 2,
  POSE3D: 3,
  AXIS3D: 4,
  TAG: 5,
  CAMERA: 6,
  TRIANGLE: 7,
  HEXAGON: 8,
  SONARCONE: 9
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.vs.obj_collection_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.obj_collection_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.vs.obj_collection_t.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vs.obj_collection_t.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool reset = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vs.obj_collection_t.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.vs.obj_collection_t.prototype.setReset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional obj_type type = 4;
 * @return {!proto.vs.obj_collection_t.obj_type}
 */
proto.vs.obj_collection_t.prototype.getType = function() {
  return /** @type {!proto.vs.obj_collection_t.obj_type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.vs.obj_collection_t.obj_type} value */
proto.vs.obj_collection_t.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated obj_t objs = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.obj_t>}
 */
proto.vs.obj_collection_t.prototype.getObjsList = function() {
  return /** @type{!Array.<!proto.vs.obj_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.obj_t, 5));
};


/** @param {!Array.<!proto.vs.obj_t>} value */
proto.vs.obj_collection_t.prototype.setObjsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.vs.obj_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.obj_t}
 */
proto.vs.obj_collection_t.prototype.addObjs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.vs.obj_t, opt_index);
};


proto.vs.obj_collection_t.prototype.clearObjsList = function() {
  this.setObjsList([]);
};


/**
 * optional int32 nobjs = 6;
 * @return {number}
 */
proto.vs.obj_collection_t.prototype.getNobjs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.vs.obj_collection_t.prototype.setNobjs = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.reset_collections_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vs.reset_collections_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.reset_collections_t.displayName = 'proto.vs.reset_collections_t';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.reset_collections_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.reset_collections_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.reset_collections_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.reset_collections_t.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.reset_collections_t}
 */
proto.vs.reset_collections_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.reset_collections_t;
  return proto.vs.reset_collections_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.reset_collections_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.reset_collections_t}
 */
proto.vs.reset_collections_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.reset_collections_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.reset_collections_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.reset_collections_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.reset_collections_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.point3d_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vs.point3d_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.point3d_t.displayName = 'proto.vs.point3d_t';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.point3d_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.point3d_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.point3d_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.point3d_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.point3d_t}
 */
proto.vs.point3d_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.point3d_t;
  return proto.vs.point3d_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.point3d_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.point3d_t}
 */
proto.vs.point3d_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.point3d_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.point3d_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.point3d_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.point3d_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.vs.point3d_t.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vs.point3d_t.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.vs.point3d_t.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vs.point3d_t.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.vs.point3d_t.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vs.point3d_t.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.color_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vs.color_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.color_t.displayName = 'proto.vs.color_t';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.color_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.color_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.color_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.color_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    g: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    b: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.color_t}
 */
proto.vs.color_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.color_t;
  return proto.vs.color_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.color_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.color_t}
 */
proto.vs.color_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.color_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.color_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.color_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.color_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float r = 1;
 * @return {number}
 */
proto.vs.color_t.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vs.color_t.prototype.setR = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float g = 2;
 * @return {number}
 */
proto.vs.color_t.prototype.getG = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vs.color_t.prototype.setG = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float b = 3;
 * @return {number}
 */
proto.vs.color_t.prototype.getB = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vs.color_t.prototype.setB = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.point3d_list_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.point3d_list_t.repeatedFields_, null);
};
goog.inherits(proto.vs.point3d_list_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.point3d_list_t.displayName = 'proto.vs.point3d_list_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.point3d_list_t.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.point3d_list_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.point3d_list_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.point3d_list_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.point3d_list_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 2, 0),
    elementId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.vs.point3d_t.toObject, includeInstance),
    colorsList: jspb.Message.toObjectList(msg.getColorsList(),
    proto.vs.color_t.toObject, includeInstance),
    normalsList: jspb.Message.toObjectList(msg.getNormalsList(),
    proto.vs.point3d_t.toObject, includeInstance),
    pointidsList: jspb.Message.getField(msg, 7),
    npoints: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ncolors: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nnormals: jspb.Message.getFieldWithDefault(msg, 10, 0),
    npointids: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.point3d_list_t}
 */
proto.vs.point3d_list_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.point3d_list_t;
  return proto.vs.point3d_list_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.point3d_list_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.point3d_list_t}
 */
proto.vs.point3d_list_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setElementId(value);
      break;
    case 4:
      var value = new proto.vs.point3d_t;
      reader.readMessage(value,proto.vs.point3d_t.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 5:
      var value = new proto.vs.color_t;
      reader.readMessage(value,proto.vs.color_t.deserializeBinaryFromReader);
      msg.addColors(value);
      break;
    case 6:
      var value = new proto.vs.point3d_t;
      reader.readMessage(value,proto.vs.point3d_t.deserializeBinaryFromReader);
      msg.addNormals(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setPointidsList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpoints(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNcolors(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNnormals(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpointids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.point3d_list_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.point3d_list_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.point3d_list_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.point3d_list_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getElementId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.vs.point3d_t.serializeBinaryToWriter
    );
  }
  f = message.getColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.vs.color_t.serializeBinaryToWriter
    );
  }
  f = message.getNormalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.vs.point3d_t.serializeBinaryToWriter
    );
  }
  f = message.getPointidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      7,
      f
    );
  }
  f = message.getNpoints();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getNcolors();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNnormals();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getNpointids();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 collection = 2;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getCollection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setCollection = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 element_id = 3;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getElementId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setElementId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated point3d_t points = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.point3d_t>}
 */
proto.vs.point3d_list_t.prototype.getPointsList = function() {
  return /** @type{!Array.<!proto.vs.point3d_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.point3d_t, 4));
};


/** @param {!Array.<!proto.vs.point3d_t>} value */
proto.vs.point3d_list_t.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.vs.point3d_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.point3d_t}
 */
proto.vs.point3d_list_t.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.vs.point3d_t, opt_index);
};


proto.vs.point3d_list_t.prototype.clearPointsList = function() {
  this.setPointsList([]);
};


/**
 * repeated color_t colors = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.color_t>}
 */
proto.vs.point3d_list_t.prototype.getColorsList = function() {
  return /** @type{!Array.<!proto.vs.color_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.color_t, 5));
};


/** @param {!Array.<!proto.vs.color_t>} value */
proto.vs.point3d_list_t.prototype.setColorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.vs.color_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.color_t}
 */
proto.vs.point3d_list_t.prototype.addColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.vs.color_t, opt_index);
};


proto.vs.point3d_list_t.prototype.clearColorsList = function() {
  this.setColorsList([]);
};


/**
 * repeated point3d_t normals = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.point3d_t>}
 */
proto.vs.point3d_list_t.prototype.getNormalsList = function() {
  return /** @type{!Array.<!proto.vs.point3d_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.point3d_t, 6));
};


/** @param {!Array.<!proto.vs.point3d_t>} value */
proto.vs.point3d_list_t.prototype.setNormalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.vs.point3d_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.point3d_t}
 */
proto.vs.point3d_list_t.prototype.addNormals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.vs.point3d_t, opt_index);
};


proto.vs.point3d_list_t.prototype.clearNormalsList = function() {
  this.setNormalsList([]);
};


/**
 * repeated int64 pointids = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.vs.point3d_list_t.prototype.getPointidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<number>} value */
proto.vs.point3d_list_t.prototype.setPointidsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.vs.point3d_list_t.prototype.addPointids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.vs.point3d_list_t.prototype.clearPointidsList = function() {
  this.setPointidsList([]);
};


/**
 * optional int32 npoints = 8;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getNpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setNpoints = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 ncolors = 9;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getNcolors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setNcolors = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 nnormals = 10;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getNnormals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setNnormals = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 npointids = 11;
 * @return {number}
 */
proto.vs.point3d_list_t.prototype.getNpointids = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.vs.point3d_list_t.prototype.setNpointids = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.point3d_list_collection_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.point3d_list_collection_t.repeatedFields_, null);
};
goog.inherits(proto.vs.point3d_list_collection_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.point3d_list_collection_t.displayName = 'proto.vs.point3d_list_collection_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.point3d_list_collection_t.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.point3d_list_collection_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.point3d_list_collection_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.point3d_list_collection_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.point3d_list_collection_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reset: jspb.Message.getFieldWithDefault(msg, 4, false),
    pointListsList: jspb.Message.toObjectList(msg.getPointListsList(),
    proto.vs.point3d_list_t.toObject, includeInstance),
    nlists: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.point3d_list_collection_t}
 */
proto.vs.point3d_list_collection_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.point3d_list_collection_t;
  return proto.vs.point3d_list_collection_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.point3d_list_collection_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.point3d_list_collection_t}
 */
proto.vs.point3d_list_collection_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.vs.point3d_list_collection_t.point_type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 5:
      var value = new proto.vs.point3d_list_t;
      reader.readMessage(value,proto.vs.point3d_list_t.deserializeBinaryFromReader);
      msg.addPointLists(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNlists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.point3d_list_collection_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.point3d_list_collection_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.point3d_list_collection_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.point3d_list_collection_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReset();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPointListsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.vs.point3d_list_t.serializeBinaryToWriter
    );
  }
  f = message.getNlists();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vs.point3d_list_collection_t.point_type = {
  POINT: 0,
  LINE_STRIP: 1,
  LINE_LOOP: 2,
  LINES: 3,
  TRIANGLE_STRIP: 4,
  TRIANGLE_FAN: 5,
  TRIANGLES: 6,
  QUAD_STRIP: 7,
  QUADS: 8,
  POLYGON: 9
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.vs.point3d_list_collection_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.point3d_list_collection_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.vs.point3d_list_collection_t.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vs.point3d_list_collection_t.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional point_type type = 3;
 * @return {!proto.vs.point3d_list_collection_t.point_type}
 */
proto.vs.point3d_list_collection_t.prototype.getType = function() {
  return /** @type {!proto.vs.point3d_list_collection_t.point_type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.vs.point3d_list_collection_t.point_type} value */
proto.vs.point3d_list_collection_t.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool reset = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vs.point3d_list_collection_t.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.vs.point3d_list_collection_t.prototype.setReset = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated point3d_list_t point_lists = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.point3d_list_t>}
 */
proto.vs.point3d_list_collection_t.prototype.getPointListsList = function() {
  return /** @type{!Array.<!proto.vs.point3d_list_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.point3d_list_t, 5));
};


/** @param {!Array.<!proto.vs.point3d_list_t>} value */
proto.vs.point3d_list_collection_t.prototype.setPointListsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.vs.point3d_list_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.point3d_list_t}
 */
proto.vs.point3d_list_collection_t.prototype.addPointLists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.vs.point3d_list_t, opt_index);
};


proto.vs.point3d_list_collection_t.prototype.clearPointListsList = function() {
  this.setPointListsList([]);
};


/**
 * optional int32 nlists = 6;
 * @return {number}
 */
proto.vs.point3d_list_collection_t.prototype.getNlists = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.vs.point3d_list_collection_t.prototype.setNlists = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.cov_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.cov_t.repeatedFields_, null);
};
goog.inherits(proto.vs.cov_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.cov_t.displayName = 'proto.vs.cov_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.cov_t.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.cov_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.cov_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.cov_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.cov_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 2, 0),
    elementId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    entriesList: jspb.Message.getRepeatedFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.cov_t}
 */
proto.vs.cov_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.cov_t;
  return proto.vs.cov_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.cov_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.cov_t}
 */
proto.vs.cov_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setElementId(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setEntriesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.cov_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.cov_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.cov_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.cov_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getElementId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vs.cov_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.cov_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 collection = 2;
 * @return {number}
 */
proto.vs.cov_t.prototype.getCollection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vs.cov_t.prototype.setCollection = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 element_id = 3;
 * @return {number}
 */
proto.vs.cov_t.prototype.getElementId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vs.cov_t.prototype.setElementId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated double entries = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.vs.cov_t.prototype.getEntriesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array.<number>} value */
proto.vs.cov_t.prototype.setEntriesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.vs.cov_t.prototype.addEntries = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.vs.cov_t.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.cov_collection_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.cov_collection_t.repeatedFields_, null);
};
goog.inherits(proto.vs.cov_collection_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.cov_collection_t.displayName = 'proto.vs.cov_collection_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.cov_collection_t.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.cov_collection_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.cov_collection_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.cov_collection_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.cov_collection_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reset: jspb.Message.getFieldWithDefault(msg, 3, false),
    covsList: jspb.Message.toObjectList(msg.getCovsList(),
    proto.vs.cov_t.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.cov_collection_t}
 */
proto.vs.cov_collection_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.cov_collection_t;
  return proto.vs.cov_collection_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.cov_collection_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.cov_collection_t}
 */
proto.vs.cov_collection_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 4:
      var value = new proto.vs.cov_t;
      reader.readMessage(value,proto.vs.cov_t.deserializeBinaryFromReader);
      msg.addCovs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.cov_collection_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.cov_collection_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.cov_collection_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.cov_collection_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReset();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCovsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.vs.cov_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.vs.cov_collection_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.cov_collection_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.vs.cov_collection_t.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vs.cov_collection_t.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool reset = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vs.cov_collection_t.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.vs.cov_collection_t.prototype.setReset = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated cov_t covs = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.cov_t>}
 */
proto.vs.cov_collection_t.prototype.getCovsList = function() {
  return /** @type{!Array.<!proto.vs.cov_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.cov_t, 4));
};


/** @param {!Array.<!proto.vs.cov_t>} value */
proto.vs.cov_collection_t.prototype.setCovsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.vs.cov_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.cov_t}
 */
proto.vs.cov_collection_t.prototype.addCovs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.vs.cov_t, opt_index);
};


proto.vs.cov_collection_t.prototype.clearCovsList = function() {
  this.setCovsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.text_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vs.text_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.text_t.displayName = 'proto.vs.text_t';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.text_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.text_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.text_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.text_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collectionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objectId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.text_t}
 */
proto.vs.text_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.text_t;
  return proto.vs.text_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.text_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.text_t}
 */
proto.vs.text_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCollectionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.text_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.text_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.text_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.text_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCollectionId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getObjectId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vs.text_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.text_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 collection_id = 2;
 * @return {number}
 */
proto.vs.text_t.prototype.getCollectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vs.text_t.prototype.setCollectionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 object_id = 3;
 * @return {number}
 */
proto.vs.text_t.prototype.getObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vs.text_t.prototype.setObjectId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.vs.text_t.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vs.text_t.prototype.setText = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vs.text_collection_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vs.text_collection_t.repeatedFields_, null);
};
goog.inherits(proto.vs.text_collection_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vs.text_collection_t.displayName = 'proto.vs.text_collection_t';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vs.text_collection_t.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vs.text_collection_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vs.text_collection_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vs.text_collection_t} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vs.text_collection_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reset: jspb.Message.getFieldWithDefault(msg, 4, false),
    textsList: jspb.Message.toObjectList(msg.getTextsList(),
    proto.vs.text_t.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vs.text_collection_t}
 */
proto.vs.text_collection_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vs.text_collection_t;
  return proto.vs.text_collection_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vs.text_collection_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vs.text_collection_t}
 */
proto.vs.text_collection_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 5:
      var value = new proto.vs.text_t;
      reader.readMessage(value,proto.vs.text_t.deserializeBinaryFromReader);
      msg.addTexts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vs.text_collection_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vs.text_collection_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vs.text_collection_t} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vs.text_collection_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReset();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTextsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.vs.text_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.vs.text_collection_t.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vs.text_collection_t.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.vs.text_collection_t.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vs.text_collection_t.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool reset = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vs.text_collection_t.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.vs.text_collection_t.prototype.setReset = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated text_t texts = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vs.text_t>}
 */
proto.vs.text_collection_t.prototype.getTextsList = function() {
  return /** @type{!Array.<!proto.vs.text_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vs.text_t, 5));
};


/** @param {!Array.<!proto.vs.text_t>} value */
proto.vs.text_collection_t.prototype.setTextsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.vs.text_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vs.text_t}
 */
proto.vs.text_collection_t.prototype.addTexts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.vs.text_t, opt_index);
};


proto.vs.text_collection_t.prototype.clearTextsList = function() {
  this.setTextsList([]);
};


